{"version":3,"sources":["store/inputs.js","store/constants.js","store/notes.js","components/NoteForm.js","components/NotesDisplay.js","containers/Notes.js","store/actions.js","App.js","serviceWorker.js","store/storeServices.js","index.js"],"names":["initialState","inputTitle","inputContent","reducer","state","action","type","title","content","activeNotes","deletedNotes","currentNotes","event","preventDefault","id","uuidv4","date","Date","toLocaleString","updatedActiveNotes","filter","note","targetId","deletedNote","alert","NoteForm","props","className","htmlFor","placeholder","value","onChange","e","onTitleChange","target","name","cols","rows","required","onContentChange","form","onClick","onAddNoteThenClearInput","NotesDisplay","focusBlueButton","focusRedButton","onSelectActive","onSelectDeleted","map","onDeleteNote","connect","inputs","notes","dispatch","actionCreators","onAddNote","a","App","Boolean","window","location","hostname","match","rootReducer","combineReducers","inputsReducer","notesReducer","logger","createLogger","persistState","serializedState","localStorage","getItem","JSON","parse","loadState","store","createStore","applyMiddleware","thunk","subscribe","stringify","setItem","saveState","getState","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.999aec30.chunk.js","sourcesContent":["import * as actionTypes from './constants';\r\n\r\nconst initialState = {\r\n  inputTitle: '',\r\n  inputContent: '' ,\r\n}\r\n\r\nconst reducer = (state=initialState, action) => {\r\n  switch(action.type) {\r\n    case actionTypes.TITLE_CHANGE:\r\n      return {\r\n        ...state,\r\n        inputTitle: action.title\r\n      }\r\n    case actionTypes.CONTENT_CHANGE:\r\n      return {\r\n        ...state,\r\n        inputContent: action.content\r\n      }\r\n    case actionTypes.CLEAR_INPUT:\r\n      return {\r\n        ...state,\r\n        inputTitle: '',\r\n        inputContent: ''\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default reducer;","const TITLE_CHANGE = 'TITLE_CHANGE';\r\nconst CONTENT_CHANGE = 'CONTENT_CHANGE';\r\nconst CLEAR_INPUT = 'CLEAR_INPUT';\r\nconst ADD_NOTE = 'ADD_NOTE';\r\nconst DELETE_NOTE = 'DELETE_NOTE';\r\nconst SELECT_ACTIVE_NOTES = 'SELECT_ACTIVE_NOTEs';\r\nconst SELECT_DELETED_NOTES = 'SELECT_DELETED_NOTES';\r\n\r\nexport {\r\n  TITLE_CHANGE,\r\n  CONTENT_CHANGE,\r\n  CLEAR_INPUT,\r\n  ADD_NOTE,\r\n  DELETE_NOTE,\r\n  SELECT_ACTIVE_NOTES,\r\n  SELECT_DELETED_NOTES\r\n}","import * as actionTypes from './constants';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nconst initialState = {\r\n  activeNotes: [],\r\n  deletedNotes: [],\r\n  currentNotes: ''\r\n}\r\n\r\nconst reducer = (state=initialState, action) => {\r\n  switch(action.type) {\r\n    case actionTypes.ADD_NOTE:\r\n      if(action.content) {\r\n        action.event.preventDefault();\r\n        return {\r\n          ...state,\r\n          activeNotes: [ \r\n            {\r\n              id: uuidv4(),\r\n              title: action.title,\r\n              content: action.content,\r\n              date: new Date().toLocaleString() \r\n            },\r\n            ...state.activeNotes,\r\n          ],\r\n        }\r\n      } else {\r\n        return { ...state }\r\n      }\r\n\r\n    case actionTypes.DELETE_NOTE:\r\n      const updatedActiveNotes = state.activeNotes.filter((note) => {\r\n        return note.id !== action.targetId\r\n      })\r\n      const deletedNote = state.activeNotes.filter((note) => {\r\n        return note.id === action.targetId\r\n      })\r\n\r\n      if(state.currentNotes === 'activeNotes') {\r\n        return {\r\n          ...state,\r\n          activeNotes: updatedActiveNotes,\r\n          deletedNotes: [\r\n            ...state.deletedNotes,\r\n            deletedNote[0]\r\n          ],\r\n        }\r\n      } else if (state.currentNotes === 'deletedNotes') {\r\n        alert(\"The notes's already been deleted\")\r\n        return {\r\n          ...state\r\n        }\r\n      }\r\n    \r\n    case actionTypes.SELECT_ACTIVE_NOTES:\r\n      return {\r\n        ...state,\r\n        currentNotes: 'activeNotes',\r\n      }\r\n    case actionTypes.SELECT_DELETED_NOTES:\r\n      return {\r\n        ...state,\r\n        currentNotes: 'deletedNotes'\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default reducer;","import React from 'react'\r\nimport './NoteForm.css';\r\n\r\nfunction NoteForm(props) {\r\n  return (\r\n    <form id=\"notes-form\" className=\"notes-form\">\r\n      <label htmlFor=\"note-title\">Title: </label>\r\n      <input\r\n        type=\"text\" \r\n        id=\"note-title\" \r\n        placeholder=\"What's the matter?\"\r\n        value={props.inputTitle}\r\n        onChange={(e) => props.onTitleChange(e.target.value)} \r\n        className=\"notes-form__input\"\r\n      />\r\n\r\n      <label htmlFor=\"note-content\">Content: </label>\r\n      <textarea \r\n        name=\"note-content\" \r\n        id=\"note-content\" \r\n        cols=\"30\" \r\n        rows=\"15\"\r\n        placeholder=\"Jot down any details here\"\r\n        value={props.inputContent}\r\n        required\r\n        onChange={(e) => props.onContentChange(e.target.value)}\r\n        className=\"notes-form__input\"\r\n        >\r\n      </textarea>\r\n\r\n      <button form=\"notes-form\"\r\n        className='App__button'\r\n        onClick={(e) => props.onAddNoteThenClearInput(props.inputTitle, props.inputContent, e)}\r\n      >\r\n        add a note\r\n      </button>\r\n    </form>\r\n  )\r\n}\r\n\r\n// const mapStateToProps = state => ({\r\n//   inputTitle: state.inputs.inputTitle,\r\n//   inputContent: state.inputs.inputContent,\r\n// })\r\n\r\n// const mapDispatchToProps = dispatch => {\r\n//   return {\r\n//     onTitleChange: (title) => dispatch({type: actionTypes.TITLE_CHANGE, title: title}),\r\n//     onContentChange: (content) => dispatch({type: actionTypes.CONTENT_CHANGE, content: content}),\r\n//     onAddNote: (title, content, event) => dispatch({type: actionTypes.ADD_NOTE, title: title, content: content, event: event}),\r\n//   }\r\n// }\r\n\r\nexport default NoteForm;\r\n","import React from 'react'\r\nimport './NotesDisplay.css';\r\n\r\nfunction NotesDisplay(props) {\r\n\r\n  const currentNotes = () => {\r\n    if(props.currentNotes === 'deletedNotes') {\r\n      return props.deletedNotes;\r\n    } else {\r\n      return props.activeNotes;\r\n    }\r\n  }\r\n\r\n  let focusBlueButton;\r\n  let focusRedButton;\r\n\r\n  (props.currentNotes === 'activeNotes' || props.currentNotes === '') ? focusBlueButton = 'App__button--focusBlue' : focusBlueButton = ''\r\n  props.currentNotes === 'deletedNotes' ? focusRedButton = 'App__button--focusRed' : focusRedButton = ''\r\n\r\n  return (\r\n    <div>\r\n      <h2>Notes</h2>        \r\n      <div>\r\n        <button \r\n          // className=\"dib bg-lightest-blue ma2 pa2 b--light-blue br3-m\"\r\n          className={`App__button App__button--blue ${focusBlueButton}`}\r\n          onClick={props.onSelectActive}\r\n        >\r\n          Show active notes\r\n        </button>\r\n        <button \r\n        // className=\"dib bg-light-pink ma pa2 b--pink br3-m\"\r\n          className={`App__button App__button--red ${focusRedButton}`}\r\n          onClick={props.onSelectDeleted}\r\n        >\r\n          Show deleted notes\r\n        </button>\r\n      </div>\r\n      <br/>\r\n      <ul className=\"notes__display\">\r\n        {currentNotes().map((note) => {\r\n          return (\r\n            <li className=\"notes__list\">\r\n              <span>Title: {note.title}</span>\r\n              <button\r\n                onClick={() => props.onDeleteNote(note.id)}\r\n                className=\"App__button--small App__button--red \"\r\n                // className=\"dib bg-light-pink ma2 pa b--pink br-l\"\r\n              >\r\n                X\r\n              </button>\r\n              <br/>\r\n              <span>Content: {note.content}</span>\r\n              <br/>\r\n              <span>Date: {note.date}</span>\r\n              <br/>\r\n            </li>\r\n          )\r\n        })}\r\n      </ul>\r\n    </div>\r\n  )\r\n}\r\n\r\n// const mapStateToProps = state => ({\r\n//   activeNotes: state.notes.activeNotes,\r\n//   deletedNotes: state.notes.deletedNotes,\r\n//   currentNotes: state.notes.currentNotes\r\n// })\r\n\r\n// const mapDispatchToProps = dispatch => {\r\n//   return {\r\n//     onDeleteNote: (id) => dispatch({type: actionTypes.DELETE_NOTE, targetId: id}),\r\n//     onSelectActive: () => dispatch({type: actionTypes.SELECT_ACTIVE_NOTES}),\r\n//     onSelectDeleted: () => dispatch({type: actionTypes.SELECT_DELETED_NOTES})\r\n//   }\r\n// }\r\n\r\nexport default NotesDisplay;","import React, {useEffect} from 'react';\r\nimport NoteForm from '../components/NoteForm';\r\nimport NotesDisplay from '../components/NotesDisplay';\r\nimport { connect } from 'react-redux';\r\nimport * as actionTypes from '../store/constants';\r\nimport * as actionCreators from '../store/actions';\r\n\r\nconst Notes = (props) => {\r\n  return(\r\n    <div>\r\n      <h1>Note-taking App</h1>\r\n      <NoteForm \r\n        inputTitle={props.inputTitle} \r\n        inputContent={props.inputContent}\r\n        onTitleChange={props.onTitleChange}\r\n        onContentChange={props.onContentChange}\r\n        onAddNote={props.onAddNote}\r\n\r\n        onAddNoteThenClearInput={props.onAddNoteThenClearInput}\r\n        />\r\n      <hr/>\r\n      <NotesDisplay props={props} \r\n        activeNotes={props.activeNotes}\r\n        deletedNotes={props.deletedNotes}\r\n        currentNotes={props.currentNotes}\r\n        onDeleteNote={props.onDeleteNote}\r\n        onSelectActive={props.onSelectActive}\r\n        onSelectDeleted={props.onSelectDeleted}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    inputTitle: state.inputs.inputTitle,\r\n    inputContent: state.inputs.inputContent,\r\n    activeNotes: state.notes.activeNotes,\r\n    deletedNotes: state.notes.deletedNotes,\r\n    currentNotes: state.notes.currentNotes\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onTitleChange: (title) => dispatch(actionCreators.titleChange(title)),\r\n    onContentChange: (content) => dispatch(actionCreators.contentChange(content)),\r\n    onAddNote: (title, content, event) => dispatch(actionCreators.addNote(title, content, event)),\r\n    onDeleteNote: (id) => dispatch(actionCreators.deleteNote(id)),\r\n    onSelectActive: () => dispatch(actionCreators.selectActive()),\r\n    onSelectDeleted: () => dispatch(actionCreators.selectDeleted()),\r\n\r\n    onAddNoteThenClearInput: (title, content, event) => dispatch(actionCreators.addNoteThenClearInput(title, content, event))\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Notes);","import * as actionTypes from './constants';\r\n\r\nconst titleChange = (title) => ({ type: actionTypes.TITLE_CHANGE, title: title });\r\nconst contentChange = (content) => ({ type: actionTypes.CONTENT_CHANGE, content: content });\r\nconst addNote = (title, content, event) => ({type: actionTypes.ADD_NOTE, title: title, content: content, event: event });\r\nconst deleteNote = (id) => ({ type: actionTypes.DELETE_NOTE, targetId: id });\r\nconst selectActive = () => ({ type: actionTypes.SELECT_ACTIVE_NOTES });\r\nconst selectDeleted = () => ({ type: actionTypes.SELECT_DELETED_NOTES });\r\n\r\nconst addNoteThenClearInput = (title, content, event) => async(dispatch) => {\r\n  await dispatch({type: actionTypes.ADD_NOTE, title: title, content: content, event: event});\r\n  dispatch({type: actionTypes.CLEAR_INPUT});\r\n}\r\n\r\nexport {\r\n  titleChange,\r\n  contentChange,\r\n  addNote,\r\n  deleteNote,\r\n  selectActive,\r\n  selectDeleted,\r\n  addNoteThenClearInput\r\n}","import React from 'react';\nimport './App.css';\nimport Notes from './containers/Notes';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Notes />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const loadState = () => {\r\n  const serializedState = localStorage.getItem('noteStore');\r\n  if(serializedState) {\r\n    return JSON.parse(serializedState);\r\n  } else {\r\n    return undefined;\r\n  }\r\n}\r\n\r\nconst saveState = (state) => {\r\n  const serializedState = JSON.stringify(state);\r\n  localStorage.setItem('noteStore', serializedState);\r\n}\r\n\r\nexport { loadState, saveState}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { Provider } from 'react-redux';\nimport { createLogger } from 'redux-logger';\nimport './index.css';\nimport inputsReducer from './store/inputs';\nimport notesReducer from './store/notes';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { saveState, loadState } from './store/storeServices';\nimport thunk from 'redux-thunk';\n\nconst rootReducer = combineReducers({\n  inputs: inputsReducer,\n  notes: notesReducer\n})\n\nconst logger = createLogger();\nconst persistState = loadState();\n\nconst store = createStore(rootReducer, persistState, applyMiddleware(thunk, logger));\n\nstore.subscribe(() => {\n  saveState(store.getState());\n})\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}